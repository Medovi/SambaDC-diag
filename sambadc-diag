#!/bin/bash

set -euo pipefail

. shell-getopt

PROG="${0##*/}"
PROG_VERSION="0.0.1"

cmd="run"
global_retval=0

print_version(){
    cat <<EOF
Версия программы $PROG - $PROG_VERSION
EOF
    exit
}

show_usage(){
    cat <<EOF
$PROG - утилита для диагностики состояния контроллера домена

Формат вызова: $PROG [options] [<diagnostic-task>]

Опции:
-l, --list		Список диагностических задач
-v, --version		Вывод версии утилиты
-h, --help		Показать данную справку и выйти
EOF
    exit
}

TEMP=$(getopt -n "$PROG" -o "l,v,r,h", -l "list,version,report,help" -- "$@") || show_usage
eval set -- "$TEMP"

while true; do
    case "$1" in
	-l|--list) cmd="list"; shift ;;
	-v|--version) print_version; shift ;;
	-r|--report) shift; ;;
	-h|--help) show_usage; shift ;;
	--) shift; break ;;
	*) fatal "Неверное значение: $1" ;;
    esac
done

task_list="$*"

task_show(){
    local func="$1"
    echo "$func"
}

# Функция, определяющая наличие задач в списке и возвращающая код ошибки в случае выполнения или невыполнения задачи
task_run(){
    local retval=126
    local func="$1"

    if test -n "$task_list"; then
	echo "$task_list" | tr ' ' '\n' | grep -q "^$func\$" || return 0
    fi

    $func && retval=0 || retval="$?"
    test $retval=0 || global_retval=1

    return $retval
}

task(){
    local task="$1"
    
    case "$cmd" in
	list) task_show "$task" ;;
	report) ;;
	run) task_run "$task" && echo "[DONE]: $task" || echo "[FAIL]: $task" ;;
	*) fatal "Неверное значение: $cmd" ;;
    esac
}

#Проверка прав доступа к каталогу sysvol (без использования samba-tools)
permissions_sysvol(){
    # Прав доступа к каталогам не будет у обычного пользователя, но должны быть у рута
    local path="/var/lib/samba/sysvol"
    test -r "$path" && test -w "$path" && test -x "$path"
}

# Проврека на то, что каталог sysvol не пустой
is_not_empty_sysvol(){
    # От рута проблем нет
    [ "$(ls -a "/var/lib/samba/sysvol" 2> /dev/null)" ]
	
}

# Проверка на установленный пакет admx-basealt
admx_version(){
    #rpm -q admx-basealt | grep -q '^admx-basealt-\+[[:digit:]\+\.[:digit:]\+\.[:digit:]\+\.[:digit:]]\+-alt1.noarch'

    # тест следует выполнять, выполнив перед этип apt-get update (обновление баз пакетов)
    # но apt-get update следует запускать от рута, поэтому при запуске от рута проблем с тестом не будет
    #apt-get update > /dev/null
    policy_output="$(apt-cache policy admx-basealt 2> /dev/null)"
    installed_version="$(echo "$policy_output" | grep "Установлен:" | awk '{print $2}')"
    candidate_version="$(echo "$policy_output" | grep "Кандидат:" | awk '{print $2}')"

    if [ -z "$installed_version" ] || [ -z "$candidate_version" ]; then
	return 1
    fi

    if [ "$installed_version" == "$candidate_version" ]; then
	return 0
    else
	[ "$(echo -e "$installed_version\n$candidate_version" | sort -V | head -n1)" != "$installed_version" ]
    fi
}

# Проверка: существуют ли служебные каталоги и конфигурационные файлы самбы?
presence_files_and_dirs_samba(){
    test -s /etc/resolvconf.conf && test -s /etc/samba/smb.conf && test -d /var/lib/samba && test -d /var/lib/samba/sysvol && test -d /var/cache/samba
}

# Проверка последней установленной версии самбы
samba_version(){
    # тест следует выполнять, выполнив перед этим apt-get update (обновление баз пакетов),
    # но apt-get update следует запускать от рута, поэтому при запуске от рута проблем с тестом не будет
    #apt-get update > /dev/null
    policy_output="$(apt-cache policy samba 2> /dev/null)"
    installed_version="$(echo "$policy_output" | grep "Установлен:" | awk '{print $2}')"
    candidate_version="$(echo "$policy_output" | grep "Кандидат:" | awk '{print $2}')"

    if [ -z "$installed_version" ] || [ -z "$candidate_version" ]; then
	return 1
    fi

    if [ "$installed_version" == "$candidate_version" ]; then
	return 0
    else
	[ "$(echo -e "$installed_version\n$candidate_version" | sort -V | head -n1)" != "$installed_version" ]
    fi
}

# Проверка полного доменного имени хоста (FQDN), нужно пересмотреть данный тест
test_hostname(){
    local host="$(hostname -f)"
    
    [[ "$host" == *.* ]] && [[ "$host" != $.* ]] && [[ "$(host "$host" 2> /dev/null)" ]]
}

# Проверка состояния службы Samba
samba_service_status(){
    systemctl status samba.service 2> /dev/null | grep "Active: active (running)" > /dev/null
}

# Проверка состояния служб smbd и winbindd (в случае чего можно ещё добавить службы)
other_services_status(){
    systemctl status smbd.service 2> /dev/null | grep "Active: active (running)" > /dev/null &&
    systemctl status winbindd.service 2> /dev/null | grep "Active: active (running)" > /dev/null
}

# Проверка состояния базы SambaAD
samba_dbcheck(){
# Только от рута
    samba-tool dbcheck 2> /dev/null | grep -q "Checked \+[[:digit:]]\+ objects (0 errors)"
}

# Проверка синхронизации времени (активности сервиса NTP)
ntp_status(){
    timedatectl 2> /dev/null | grep -q "NTP service: active" > /dev/null
}

# Проверка fsmo-ролей контроллера домена
fsmo_dc_check(){
    echo "У контроллера домена следующие fsmo-роли:"
    samba-tool fsmo show | awk '{print $1}'
    #echo "\n" | samba-tool testparm -v 2> /dev/null | grep -q "server role = active directory domain controller"
}

# Проверка на наличие конфигурационных файлов DNS
presence_files_and_dirs_dns(){
    # Сначала нужно определить какой установлен внутренний DNS-сервер, а после уже выполнять тест
    # в зависимости от определённого DNS-сервера (SAMBA_INTERNAL, BIND9_FLATLINE, BIND9_DLZ, NONE)
    test -s /etc/resolv.conf && test -s /etc/bind/options.conf && test -s /etc/bind/resolvconf-options.conf
}
