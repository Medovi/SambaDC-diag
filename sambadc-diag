#!/bin/bash

set -euo pipefail

. shell-terminfo
. shell-getopt

terminfo_init

PROG="sambadc-diag"
VERSION=0.2.8
verbose=
listcmd=
runcmd=run
logfile=/dev/null
force=
global_retval=0

print_version(){
    cat <<EOF
Версия программы $PROG - $PROG_VERSION
EOF
    exit
}

show_usage(){
    cat <<EOF
$PROG - утилита для диагностики состояния контроллера домена

Формат вызова: $PROG [options] [<diagnostic-task>]

Опции:
-l, --list<----><------>Список диагностических задач
-V, --version<-><------>Вывод версии утилиты
-v, --verbose<-><------>Подробный вывод
-h, --help<----><------>Показать данную справку и выйти
-w, --logfile[=FILE]<-->Вывести подробный вывод в файл
-f, --force<---><------>Принудительная запись вывода в существующий файл
EOF
    exit
}

TEMP=$(getopt -n "$PROG" -o "l,V,v,h,w::,f" -l "list,version,verbose,help,logfile::,force" -- "$@") || show_usage
eval set -- "$TEMP"

while :; do
    case "$1" in
	-l|--list) listcmd=1 ;;
	-V|--version) print_version "$PROG" ;;
	-v|--verbose) verbose=1 ;;
	-h|--help) show_usage ;;
	-w|--logfile) shift; test -n "$1" && logfile="$1" || logfile="diag-domain-client.log" ;;
	-f|--force) force=1 ;;
	--) shift; break ;;
	*) fatal "Unrecognized option: $1" ;;
    esac
    shift
done

customcmd="$*"

#msg_non_root(){
#    echo -n "$*: ["
#    color_text "SKIP" blue
#    echo "]"
#}

msg_fail(){
    echo -n "$*: ["
    color_text "FAIL" red
    echo "]"
}

msg_warn(){
    echo -n "$*: ["
    color_text "WARN" yellow
    echo "]"
}

msg_done(){
    echo -n "$*: ["
    color_text "DONE" green
    echo "]"
}

task_show(){
    local func="$1"
    echo "$func"
}

__command_msg(){
    local p='$'
    if test "$1" = '-r'; then
        shift
        p='#'
    fi
    color_message "$p $*" bold
}

__header(){
    color_message "===============================================================================" bold white
}

__footer(){
    color_message "===============================================================================" bold white
}

__delimiter(){
    echo "-------------------------------------------------------------------------------"
}

__check_title(){
    color_message "$1" bold white
}

__newline(){
    echo
}

__short_msg(){
    case "$1" in
        0) msg_done  "$2" ;;
        2) msg_warn  "$2" ;;
        102) msg_non_root  "$2" ;;
        *) msg_fail "$2" ;;
    esac
}

__log(){
    test -z $verbose && tee -a "$logfile" 1>/dev/null 2>&1 ||
        tee -a "$logfile"
}

__log_force_print(){
    tee -a "$logfile"
}

print_head(){
    __header | __log
    __check_title "| Samba environment diagnostic tool |" | __log
    __delimiter | __log
    echo "Version: $VERSION" | __log
    echo "Date: $(date)" | __log
    __delimiter | __log
    echo "System information" | __log
    echo "Kernel: $(uname -r)" | __log
    echo "Branch: $(apt-repo list | cut -d ' ' -f 2 | grep -e '^\[.*\]$' | tail -1 | sed -E 's/\[(.*)\]/\1/')" | __log
    __footer | __log
    __newline | __log
}

is_root(){
    if test "$(id -u)" != 0; then
        return 1
    fi
    return 0
}

__not_root_skip(){
    local msg=
    if test -n "${1+x}" && test "$1" = "-m"; then
        shift
        msg="$1"
    fi
    echo -n "Running not by root, SKIP: $msg"
    echo
    echo
}

_command(){
    local retval=0
    local x=
    local q=
    local r=
    if test "$1" = '-q'; then
        shift
        q=1
    fi
    if test "$1" = '-r'; then
        shift
        r=1
    fi
    if test "$1" = '-x'; then
        shift
        x=1
    fi
    test -z "$q" && test -z "$r" && __command_msg "$*"
    test -z "$q" && test -n "$r" && __command_msg -r "$*"
    test -z "$x" || echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    eval "$*" || retval=$?
    test -z "$x" || echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    echo
    return $retval
}

run(){
    local retval=126
    local func="$1"
    local msg
    msg=$(printf "| %s |" "$func")

    __header | __log

    __check_title "$msg" | __log
    __delimiter | __log
    __newline | __log

    $func 2>&1 | __log && retval=0 || retval=$?

    __delimiter | __log

    __short_msg $retval "$2" | __log_force_print

    __footer | __log
    __newline | __log
    return $retval
}

# Проврека на то, что каталог sysvol не пустой
is_not_empty_sysvol(){
	# От рута проблем нет
	local retval=0
	local command="ls -A "/var/lib/samba/sysvol""

	if [ -n "$(ls -A "/var/lib/samba/sysvol")" ]; then
		_command $command
	else
		_command $command | head -n 1
		echo -e "\nКаталог sysvol пустой.\n"
		retval=2
	fi
	
	return $retval
}

# Информация о версии admx-basealt
admx_version(){
	#rpm -q admx-basealt | grep -q '^admx-basealt-\+[[:digit:]\+\.[:digit:]\+\.[:digit:]\+\.[:digit:]]\+-alt1.noarch'

	# тест следует выполнять, выполнив перед этип apt-get update (обновление баз пакетов)
	# но apt-get update следует запускать от рута, поэтому при запуске от рута проблем с тестом не будет
	#apt-get update > /dev/null
	#policy_output="$(apt-cache policy admx-basealt 2> /dev/null)"
	#installed_version="$(echo "$policy_output" | grep "Установлен:" | awk '{print $2}')"
	#candidate_version="$(echo "$policy_output" | grep "Кандидат:" | awk '{print $2}')"

	#if [ -z "$installed_version" ] || [ -z "$candidate_version" ]; then
		#return 1
	#fi

	#if [ "$installed_version" == "$candidate_version" ]; then
		#return 0
	#else
		#[ "$(echo -e "$installed_version\n$candidate_version" | sort -V | head -n1)" != "$installed_version" ]
	#fi
	local retval=0

	packet_name="admx-basealt"
	policy_output="$(apt-cache policy "$packet_name" 2> /dev/null)"
	local installed_version="$(echo "$policy_output" | grep "Установлен:" | awk '{print $2}')"

	if [ -z "$installed_version" ]; then
		echo -e "Пакет "$packet_name" не установлен в системе.\n"
		retval=2
	else
		echo -e "Установлена следующая версия пакета "$packet_name": "$installed_version".\n"
	fi

	return $retval
}

# Информация о версии самбы
samba_version(){
	retval=0

	packet_name="samba"
	policy_output="$(apt-cache policy "$packet_name" 2> /dev/null)"
	local installed_version="$(echo "$policy_output" | grep "Установлен:" | awk '{print $2}')"

	if [ -z "$installed_version" ]; then
		echo -e "Пакет "$packet_name" не установлен в системе.\n"
		retval=2
	else
		echo -e "Установлена следующая версия пакета "$packet_name": "$installed_version".\n"
	fi

	return $retval
}

# Проверка: существуют ли служебные каталоги и конфигурационные файлы самбы?
presence_files_and_dirs_samba(){
	local retval=0
	local file1="/etc/resolvconf.conf"
	local file2="/etc/samba/smb.conf"
	local file3="/var/lib/samba"
	local file4="/var/lib/samba/sysvol"
	local file5="/var/cache/samba"
	
	_command test -s "$file1" | head -n 1
	test -s "$file1" && echo -e "Файл "$file1" существует.\n" || { echo -e "Отсутствует файл "$file1".\n" && retval=2; }

	_command test -s "$file2" | head -n 1
	test -s "$file2" && echo -e "Файл "$file2" существует.\n" || { echo -e "Отсутствует файл "$file2".\n" && retval=2; }

	_command test -d "$file3" | head -n 1
	test -s "$file3" && echo -e "Каталог "$file3" существует.\n" || { echo -e "Отсутствует каталог "$file3".\n" && retval=2; }

	_command test -d "$file4" | head -n 1
	test -s "$file4" && echo -e "Каталог "$file4" существует.\n" || { echo -e "Отсутствует каталог "$file4".\n" && retval=2; }

	_command test -d "$file5" | head -n 1
	test -s "$file5" && echo -e "Каталог "$file5" существует.\n" || { echo -e "Отсутствует каталог "$file5".\n" && retval=2; }

	return $retval
}

# Проверка полного доменного имени хоста (FQDN), нужно пересмотреть данный тест
test_hostname(){
	local retval=0
	local host="$(hostname -f)"

	echo "Полное доменное имя хоста (FQDN):"
	echo -e ""$host"\n"

	{ [[ "$host" == *.* ]] && [[ "$host" != $.* ]] && [[ "$(host "$host")" ]]; } || retval=2

	return $retval
}

# Проверка состояния службы Samba
samba_service_status(){
	local retval=0
	local service="samba.service"

	_command systemctl status "$service" 2> /dev/null | head -n 1
	echo "$(systemctl status "$service" 2> /dev/null)" | grep "Active: active (running)" || { echo "$(systemctl status "$service" 2> /dev/null)" | grep "Active: inactive (dead)" && retval=2; } || { echo "Ошибка: возможно служба отсутствует." && retval=1; }

	echo

	return $retval
}

# Проверка состояния служб smbd и winbindd (в случае чего можно ещё добавить службы)
other_services_status(){
	local retval=-1
	local retvals=()

	local service1="smbd.service"
	local service2="winbindd.service"

	_command systemctl status "$service1" 2> /dev/null | head -n 1
	echo "$(systemctl status "$service1" 2> /dev/null)" | grep "Active: active (running)" && retvals[0]=0 || { echo "$(systemctl status "$service1" 2> /dev/null)" | grep "Active: inactive (dead)" && retvals[0]=2; } || { echo "Ошибка: возможно служба отсутствует." && retvals[0]=1; }
	echo

	_command systemctl status "$service2" 2> /dev/null | head -n 1
	echo "$(systemctl status "$service2" 2> /dev/null)" | grep "Active: active (running)" && retvals[1]=0 || { echo "$(systemctl status "$service2" 2> /dev/null)" | grep "Active: inactive (dead)" && retvals[1]=2; } || { echo "Ошибка: возможно служба отсутствует." && retvals[1]=1; }
	echo

	for val in "${retvals[@]}"; do
		if [[ $val -eq 1 ]]; then
			retval=1
			break
		elif [[ $val -eq 2 ]] && [[ $retval -ne 1 ]]; then
			retval=2
		elif [[ $val -eq 0 ]] && [[ $retval -ne 1 ]] && [[ $retval -ne 2 ]]; then
			retval=0
		fi
	done

	return $retval
}

# Проверка состояния базы SambaAD
samba_dbcheck(){
# Только от рута
	local retval=0

	_command samba-tool dbcheck 2> /dev/null | head -n 1
	echo "$(samba-tool dbcheck 2> /dev/null)" | grep -q "Checked \+[[:digit:]]\+ objects (0 errors)" || { echo "$(samba-tool dbcheck 2> /dev/null)" | grep -q "Checked \+[[:digit:]]\+ objects (\+[[:digit:]]\+ errors)" && retval=1; } || { echo "Ошибка: возможно пакет "samba-tool" не установлен." && retval=1; }

	echo

	return $retval
}

# Проверка синхронизации времени (активности сервиса NTP)
ntp_status(){
	local retval=0

	_command timedatectl

	timedatectl | grep -q "NTP service: active" || retval=2

	return $retval
}

# Проверка fsmo-ролей контроллера домена
fsmo_dc_check(){
	local retval=0
	local error=
	echo "У контроллера домена следующие fsmo-роли:"
	_command samba-tool fsmo show 2> /dev/null | head -n 1

	error=$(samba-tool fsmo show 2>&1)
	echo $error | grep -q "samba-tool: команда не найдена" && { echo "Ошибка: возможно пакет "samba-tool" не установлен." && retval=1; } || echo "$(samba-tool fsmo show)"
	echo

	#echo "\n" | samba-tool testparm -v 2> /dev/null | grep -q "server role = active directory domain controller"

	return $retval
}

# Проверка на наличие конфигурационных файлов DNS
presence_files_and_dirs_dns(){
	local retval=0

	# Сначала нужно определить какой установлен внутренний DNS-сервер, а после уже выполнять тест
	# в зависимости от определённого DNS-сервера (SAMBA_INTERNAL, BIND9_FLATLINE, BIND9_DLZ, NONE)
	local file1="/etc/resolv.conf"
	local file2="/etc/bind/options.conf"
	local file3="/etc/bind/resolvconf-options.conf"

	_command test -s "$file1" | head -n 1
	test -s "$file1" && echo -e "Файл "$file1" существует.\n" || { echo -e "Отсутствует файл "$file1".\n" && retval=2; }

	_command test -s "$file2" | head -n 1
	test -s "$file2" && echo -e "Файл "$file2" существует.\n" || { echo -e "Отсутствует файл "$file2".\n" && retval=2; }

	_command test -s "$file3" | head -n 1
	test -s "$file3" && echo -e "Файл "$file3" существует.\n" || { echo -e "Отсутствует файл "$file3".\n" && retval=2; }

	return $retval
}

# Проверка открытых (прослушиваемых) портов
open_ports(){
	local retval=0

	local ports=(
		53
		88
		123
		135
		137
		138
		139
		389
		445
		464
		636
		3268
		3269
		# Возможно эти порты необязательны
		#$(seq 49152 65535)
	)

	echo -e "Проверка портов ${ports[@]}:\n"

	for port in "${ports[@]}"; do
		if ! ss -tuln | grep -q ":$port\s"; then
			echo "Порт $port - закрыт."
			retval=2
		fi
	done
	echo

	return $retval
}

# Проверка работы рекурсивных днс-запросов (валидность ip-адреса в smb.conf)
dns_forward_check(){
	local retval=0

	echo -e "Проверка рекурсивных DNS-запросов:\n"
	validate_ipv4="^(25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})){3}$"
	[[ "$(grep "dns forwarder =" /etc/samba/smb.conf | awk '{print $4}')" =~ $validate_ipv4 ]] && echo -e "В файле "/etc/samba/smb.conf" определён адрес:\n$(grep "dns forwarder =" /etc/samba/smb.conf)." || { echo "В файле "/etc/samba/smb.conf" не определены адреса." && retval=2; }
	echo

	return $retval
}

# Проверка на то, есть ли строка nameserver 127.0.0.1 или nameserver <адрес_интерфейса>
check_nameserver(){
	local retval=0
	#Тут проблема в том, что интерфейс может быть другим, поэтому тут ещё стоит подумать
	#local interface="enp0s3"
	#local ip_addr="$(ifconfig "$interface" | grep "inet addr:" | cut -d: -f2 | awk '{print $1}')"
	local ip_addr="$(hostname -i)"
	local nameservers="$(grep "nameserver " /etc/resolv.conf | awk '{print $2}')"

	if echo "$nameservers" | grep -q "^$ip_addr$" || echo "$nameservers" | grep -q "127.0.0.1"; then
		echo -e "В конфигурационном файле "/etc/resolv.conf" имеется строка nameserver:\n$(grep "nameserver" /etc/resolv.conf)."
	else
		echo "В конфигурационном файле "/etc/resolv.conf" нет строки "nameserver" <ip_адрес_текущей_машины>"
		retval=2
	fi
	echo

	return $retval
}

# Проверка работоспособности Kerberos и ldap (должны иметься SRV записи)
check_kerberos(){
	local retval=0

	test -n "$(hostname -d)" || retval=1
	_command host -t srv _kerberos._udp."$(hostname -d)" | head -n 1
	_command host -t srv _kerberos._udp."$(hostname -d)" | grep "has SRV record 0 100 88" || retval=1
	echo

	_command host -t srv _ldap._tcp."$(hostname -d)" | head -n 1
	_command host -t srv _ldap._tcp."$(hostname -d)" | grep "has SRV record 0 100 389" || retval=1
	echo

	return $retval
}

default_run(){
	local retval=0
	run "$1" "$2" || retval=$?
	test $retval = 1 && global_retval=1
	return 0
}

list_run(){
	test -z $verbose &&
	echo "$1" ||
	echo "$1: $2"
}

custom_run(){
	if echo "$customcmd"  | tr ' ' '\n' | grep -q "^$1\$"; then
	run "$1" "$2" && global_retval=0 || global_retval=$?
	fi
}

init_log(){
	local log_index
	if test -e "$logfile" && test "$logfile" != "/dev/null" && test -z "$force"; then
		log_index="$(find . -maxdepth 1 -name "$logfile.*" 2>/dev/null | sort -V | tail -1 | sed -E 's/^.*\.([^.]*)$/\1/' || true)"
		logfile="$logfile".$(($log_index + 1))
	fi
	if test "$logfile" != "/dev/null"; then
		echo -n > "$logfile"
	fi
}

if ! test -z $listcmd; then
	runcmd=list_run
elif ! test -z "$customcmd"; then
	runcmd=custom_run
	global_retval=127
else
	runcmd=default_run
fi

if test -z $listcmd; then
	init_log
	print_head
fi

$runcmd is_not_empty_sysvol "Check empty syslog catalog"
$runcmd samba_version "Checking the latest installed version of Samba"
$runcmd admx_version "Checking for the installed admx-basealt package"
$runcmd presence_files_and_dirs_samba "Checking for the existence of Samba service directories and configuration files"
$runcmd test_hostname "Checking the full domain name of the host (FQDN)"
$runcmd samba_service_status "Checking the status of the Samba service"
$runcmd other_services_status "Checking the status of smbd and winbindd services"
$runcmd samba_dbcheck "Checking the status of SambaAD databases"
$runcmd ntp_status "Checking time synchronization (active NTP service)"
$runcmd fsmo_dc_check "Check fsmo-roles"
$runcmd presence_files_and_dirs_dns "Check files and dirs dns"
$runcmd open_ports "Checking open ports"
$runcmd dns_forward_check "Checking the operation of recursive DNS queries"
$runcmd check_nameserver "Checking for the presence of the nameserver string in the configuration file "/etc/resolv.conf""

exit "$global_retval"
